<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Flow</title>
    <link>https://richwhitjr.github.io/posts/</link>
    <description>Recent content in Posts on Flow</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 27 Dec 2022 20:01:55 -0500</lastBuildDate><atom:link href="https://richwhitjr.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bazel &#43; Beam/Dataflow</title>
      <link>https://richwhitjr.github.io/posts/bazel_dataflow/</link>
      <pubDate>Tue, 27 Dec 2022 20:01:55 -0500</pubDate>
      
      <guid>https://richwhitjr.github.io/posts/bazel_dataflow/</guid>
      <description>Python Beam on DataFlow allows for a few options for including internal and external dependencies in your jobs. None of these works very well with bazel however because of the way third party dependencies are packaged.
The main issue is that Bazel Python does not install pip libraries on the system or in the container if you choose that route. That means there is not a great way to register external dependencies with the job like mentioned in the above document.</description>
    </item>
    
    <item>
      <title>Bazel &#43; Python &#43; CUDA</title>
      <link>https://richwhitjr.github.io/posts/cuda_bazel/</link>
      <pubDate>Tue, 27 Dec 2022 09:13:30 -0500</pubDate>
      
      <guid>https://richwhitjr.github.io/posts/cuda_bazel/</guid>
      <description>One of the gaps with the current Bazel Python Rules is that it does not handle pip dependencies well when you need to install a different library if you have cuda available or not. This is a problem with torch where a different install is needed depending on cuda. This post is a fairly minimal workaround for the problem where a new repository rule is created that uses different requirements.txt files if CUDA is found or not.</description>
    </item>
    
    <item>
      <title>Flow</title>
      <link>https://richwhitjr.github.io/posts/flow/</link>
      <pubDate>Mon, 26 Dec 2022 20:03:49 -0500</pubDate>
      
      <guid>https://richwhitjr.github.io/posts/flow/</guid>
      <description>Flow is maybe the most overused word in the Data Engineering world. There is a running joke in the industry that every company, at some point in their histry, has to develop an internal tool named DataFlow. Google, now have finally put a nail in that for new projects with it Google Cloud Offering, has only given rise the slight variations on the name for new workflow and data systems. It is a suffix that will not disappear.</description>
    </item>
    
  </channel>
</rss>
